{
  "compilerOptions": {
    "target": "ESNext",
    "useDefineForClassFields": true,
    "module": "ESNext",
    "lib": ["ESNext", "DOM", "DOM.Iterable"],
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "preserve",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,

    // 设置解析非绝对路径模块名时的基准目录
    // 当项目中被配置为 "baseUrl": "./"，TypeScript 将会从首先寻找与 tsconfig.json 处于相同目录的文件。
    "baseUrl": ".",
    // 将模块导入重新映射到相对于 baseUrl 路径的配置。当配置了 paths 则必须同时配置 baseUrl 否则编译错误
    // 一旦配置了别名，则其他所有地方都需要统一使用 @ 来代替 src 否则会出现异常报错
    "paths": {
      // 此映射相对于 baseUrl ，当我们输入 @/ 时会被映射成 src/
      "@/*": ["src/*"],
      "@views/*": ["src/views/*"],
      "@assets/*": ["src/assets/*"],
      "@types/*": ["src/types/*"],
      "@components/*": ["src/components/*"],
      "@hooks/*": ["src/hooks/*"],
      "@layouts/*": ["src/layouts/*"],
      "@plugins/*": ["src/plugins/*"]
    }
  },
  // 如果没有include，编译器默认包含当前目录和子目录下所有的TypeScript文件（.ts, .d.ts 和 .tsx）
  // 排除在exclude里指定的文件。 如果指定了 include 编译器会将它们结合一并包含进来
  "include": [
    "src/**/*.ts",
    "src/**/*.d.ts",
    "src/**/*.tsx",
    "src/**/*.vue",
  ],
  // 排除在编译过程中不必要的编译文件
  "exclude": ["node_modules", "tests/server/**/*.ts", "dist", "**/*.js"],
  "references": [{ "path": "./tsconfig.node.json" }]
}
